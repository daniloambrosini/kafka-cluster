---
- name: generate client folders
  file:
    path: "{{ item }}"
    state: directory
    mode: 0755
  with_items:
    - "{{ ssl_client_dir }}"
    - "{{ ssl_ca_dir }}"
  when: secure|bool

- name: generate keystores
  become: true
  shell: "keytool -keystore {{ item.keystore }} -alias localhost -validity {{ validity }} -genkey -storepass {{ keystore_pwd }} -keypass {{ key_pwd }} -keyalg RSA -dname \"CN=kafka,OU=org,O=org,L=home,ST=Bavaria,C=DE\" -ext SAN=DNS:{{ inventory_hostname }}"
  args:
    creates: "{{ item.keystore }}"
  with_items:
    - { keystore: /usr/local/server.keystore.jks }
    - { keystore: "{{ ssl_client_dir }}/client.keystore.jks" }
  when: secure|bool

- name: create CA
  become: true
  shell: "openssl req -new -x509 -keyout {{ ssl_ca_dir }}/ca-key -out {{ ssl_ca_dir }}/ca-cert -passout pass:{{ ca_pwd }} -days {{ validity }} -subj \"/C=DE/ST=Bavaria/L=home/O=org/OU=org/CN=kafka\""
  args:
    creates: "{{ ssl_ca_dir }}/ca-cert"
  run_once: true
  when: secure|bool

- name: import CA into truststores
  become: true
  java_cert:
    cert_path: "{{ ssl_ca_dir }}/ca-cert"
    cert_alias: CARoot
    keystore_path: "{{ item }}"
    keystore_pass: "{{ truststore_pwd }}"
    keystore_create: true
    state: present
  with_items:
   - "/usr/local/server.truststore.jks"
   - "{{ ssl_client_dir }}/client.truststore.jks"
  when: secure|bool

- name: create CSR
  become: true
  shell: "keytool -keystore {{ item.keystore }} -alias localhost -certreq -file {{ item.cert_csr }} -storepass {{ keystore_pwd }} -keypass {{ key_pwd }} -ext SAN=DNS:{{ inventory_hostname }}"
  args:
    creates: "{{ item.cert_csr }}"
  with_items:
    - { keystore: "/usr/local/server.keystore.jks", cert_csr: "/tmp/cert-csr" }
    - { keystore: "{{ ssl_client_dir }}/client.keystore.jks", cert_csr: "{{ ssl_client_dir }}/cert-csr" }
  when: secure|bool

- name: create SAN conf for signing
  lineinfile:
    create: yes
    path: /tmp/san.conf
    line: 'subjectAltName=DNS:{{ inventory_hostname }}'
    state: present
  when: secure|bool

- name: sign certificates
  become: true
  shell: "openssl x509 -req -CAkey {{ ssl_ca_dir }}/ca-key -CA {{ ssl_ca_dir }}/ca-cert -days {{ validity }} -CAcreateserial -in {{ item.cert_csr }} -passin pass:{{ ca_pwd }} -out {{ item.cert_file_signed }} -extfile /tmp/san.conf"
  args:
    creates: "{{ item.cert_file_signed }}"
  with_items:
    - { cert_csr: /tmp/cert-csr, cert_file_signed: /tmp/cert-signed}
    - { cert_csr: "{{ ssl_client_dir }}/cert-csr" , cert_file_signed: "{{ ssl_client_dir }}/cert-signed" }
  register: signed
  when: secure|bool

- name: import signed certificates into keystores
  become: true
  shell: "keytool -keystore {{ item.keystore }} -alias {{ item.alias }} -import -file {{ item.path }} -noprompt -storepass {{ keystore_pwd }} -keypass {{ key_pwd }}"
  with_items:
   - { alias: CARoot, path: "{{ ssl_ca_dir }}/ca-cert", keystore: "/usr/local/server.keystore.jks" }
   - { alias: localhost, path: "/tmp/cert-signed", keystore:  "/usr/local/server.keystore.jks" }
   - { alias: CARoot, path: "{{ ssl_ca_dir }}/ca-cert", keystore: "{{ ssl_client_dir }}/client.keystore.jks" }
   - { alias: localhost, path: "{{ ssl_client_dir }}/cert-signed", keystore:  "{{ ssl_client_dir }}/client.keystore.jks" }
  when: secure|bool and signed.changed
  ignore_errors: true #client store already done with first host

- name: export client private key
  become: true
  shell: "keytool -v -importkeystore -srckeystore {{ ssl_client_dir }}/client.keystore.jks -srcalias localhost -destkeystore {{ ssl_client_dir }}/localhost.p12 -deststoretype PKCS12 -srcstorepass {{ keystore_pwd }} -deststorepass {{ keystore_pwd }} -srckeypass {{ key_pwd }} -destkeypass {{ key_pwd }}"
  args:
    creates: "{{ ssl_client_dir }}/localhost.p12"
  when: secure|bool

- name: transform client private key
  become: true
  shell: "openssl pkcs12 -in {{ ssl_client_dir }}/localhost.p12 -nocerts -nodes -passin pass:{{ keystore_pwd }} -out {{ ssl_client_dir }}/client-key"
  args:
    creates: "{{ ssl_client_dir }}/client-key"
  when: secure|bool
